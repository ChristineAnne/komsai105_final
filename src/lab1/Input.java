/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1;

import java.awt.event.KeyEvent;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author RizelleAnn
 */
public class Input extends javax.swing.JFrame {

    private static Random rand = new Random();
    String output = "";
    private String in, inData;
    private static int popSize, sampleSize;
    private int i=0;
    private int index = 1;
    private int dataType = 1;// [1] int [2] char
    private boolean dtIsDone = false, psIsDone = false, ssIsDone = false, dataIsDone = false;
    public static ArrayList<Integer> indexes = new ArrayList<Integer>();
    public static ArrayList<String> data = new ArrayList<String>();
    public static ArrayList<String> samplingResult = new ArrayList<String>();
    private String ss = "";
    private static int method;//1 SRS 2 SS
    int k;
    boolean isRerun = false, isUIRerun = false;
    private boolean isResulted = false;
    private boolean resultViewed = false;
    private String simpleOutput; // output for Simple Random Sampling
    /**
     * Creates new form Input
     */
    public Input(int method,boolean isUIRerun) {
        this.method = method;
         this.isUIRerun = isUIRerun;
        initComponents();
    }
    public Input(boolean isRerun) {
        this.isRerun = isRerun;
       
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        intButton1 = new javax.swing.JRadioButton();
        charButton1 = new javax.swing.JRadioButton();
        dataTypeLabel1 = new javax.swing.JLabel();
        popLabel1 = new javax.swing.JLabel();
        popSizeInput1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        drpdwnInput1 = new javax.swing.JComboBox<>();
        inputData1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        resultButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        finalResult1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        intButton = new javax.swing.JRadioButton();
        charButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        popSizeInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dataInput = new javax.swing.JTextField();
        inputList = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        sampleSizeInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        resultButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultDisplay = new javax.swing.JTextArea();
        editSampleButton = new javax.swing.JButton();
        editDataTypeButton = new javax.swing.JButton();
        editPopButton = new javax.swing.JButton();
        kValue = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        defaultButton = new javax.swing.JButton();

        jFrame1.setBackground(new java.awt.Color(0, 0, 0));

        intButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        intButton1.setText("Integer");

        charButton1.setBackground(new java.awt.Color(255, 255, 255));
        charButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        charButton1.setText("Character");

        dataTypeLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dataTypeLabel1.setText("1. Type of data:");

        popLabel1.setBackground(new java.awt.Color(0, 0, 0));
        popLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        popLabel1.setText("2. Population size:");

        popSizeInput1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        popSizeInput1.setText("pop size here..");
        popSizeInput1.setCaretPosition(0);
        popSizeInput1.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        popSizeInput1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                popSizeInput1InputMethodTextChanged(evt);
            }
        });
        popSizeInput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popSizeInput1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("3. Enter Data:");

        drpdwnInput1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        drpdwnInput1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        inputData1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        inputData1.setText("type data here..");
        inputData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputData1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("4. Sample Size:");

        jTextField2.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jTextField2.setText("sample size here..");

        resultButton1.setBackground(new java.awt.Color(0, 0, 0));
        resultButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        resultButton1.setText("View Result");
        resultButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultButton1ActionPerformed(evt);
            }
        });

        finalResult1.setColumns(20);
        finalResult1.setFont(new java.awt.Font("Monospaced", 2, 13)); // NOI18N
        finalResult1.setRows(5);
        finalResult1.setText("result..\n");
        jScrollPane2.setViewportView(finalResult1);

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel8.setText("0 < size >= 30");

        jLabel9.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel9.setText("no negative value if integer");

        jLabel10.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel10.setText("0< size >= 15 ");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFrame1Layout.createSequentialGroup()
                                .addComponent(dataTypeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(intButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(charButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jFrame1Layout.createSequentialGroup()
                                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(popLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jFrame1Layout.createSequentialGroup()
                                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(inputData1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(popSizeInput1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(drpdwnInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resultButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dataTypeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(intButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(charButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addGap(1, 1, 1)
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(popLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(popSizeInput1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addGap(2, 2, 2)
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputData1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(drpdwnInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFrame1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jFrame1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30)
                        .addComponent(resultButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        setTitle("Simple Random/Systematic Random Sampling");
        setBackground(new java.awt.Color(0, 0, 0));
        setBounds(new java.awt.Rectangle(620, 420, 620, 420));
        setName("DataFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(620, 420));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("1. Type of data:");

        intButton.setBackground(new java.awt.Color(0, 0, 0));
        intButton.setForeground(new java.awt.Color(255, 255, 255));
        intButton.setText("Integer");
        intButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intButtonActionPerformed(evt);
            }
        });

        charButton.setBackground(new java.awt.Color(0, 0, 0));
        charButton.setForeground(new java.awt.Color(255, 255, 255));
        charButton.setText("Character");
        charButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charButtonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("2. Population size:");

        popSizeInput.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        popSizeInput.setText("pop size here...");
        popSizeInput.setEnabled(false);
        popSizeInput.setFocusable(false);
        popSizeInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                popSizeInputMouseClicked(evt);
            }
        });
        popSizeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popSizeInputActionPerformed(evt);
            }
        });
        popSizeInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                popSizeInputKeyReleased(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("3. Enter data:");

        dataInput.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        dataInput.setText("data here...");
        dataInput.setCaretPosition(0);
        dataInput.setEnabled(false);
        dataInput.setFocusable(false);
        dataInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataInputMouseClicked(evt);
            }
        });
        dataInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataInputActionPerformed(evt);
            }
        });
        dataInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dataInputKeyReleased(evt);
            }
        });

        inputList.setEnabled(false);
        inputList.setFocusable(false);
        inputList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputListActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("4. Sample size:");

        sampleSizeInput.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        sampleSizeInput.setText("sample size here..");
        sampleSizeInput.setEnabled(false);
        sampleSizeInput.setFocusable(false);
        sampleSizeInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sampleSizeInputMouseClicked(evt);
            }
        });
        sampleSizeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleSizeInputActionPerformed(evt);
            }
        });
        sampleSizeInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sampleSizeInputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sampleSizeInputKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("size >= 25");

        jLabel11.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("0 < size >= pop size");

        jLabel12.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("no negative value for integers; single character only for character data");

        resultButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        resultButton.setText("View Result");
        resultButton.setEnabled(false);
        resultButton.setFocusable(false);
        resultButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultButtonMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resultButtonMouseReleased(evt);
            }
        });

        resultDisplay.setColumns(20);
        resultDisplay.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        resultDisplay.setRows(5);
        resultDisplay.setText("result...");
        resultDisplay.setWrapStyleWord(true);
        resultDisplay.setEnabled(false);
        resultDisplay.setFocusable(false);
        jScrollPane1.setViewportView(resultDisplay);

        editSampleButton.setBackground(new java.awt.Color(204, 204, 204));
        editSampleButton.setText("Edit sample size");
        editSampleButton.setEnabled(false);
        editSampleButton.setFocusable(false);
        editSampleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editSampleButtonMouseReleased(evt);
            }
        });

        editDataTypeButton.setBackground(new java.awt.Color(204, 204, 204));
        editDataTypeButton.setText("Edit data type");
        editDataTypeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editDataTypeButtonMouseReleased(evt);
            }
        });

        editPopButton.setBackground(new java.awt.Color(204, 204, 204));
        editPopButton.setText("Edit pop size");
        editPopButton.setEnabled(false);
        editPopButton.setFocusable(false);
        editPopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editPopButtonMouseReleased(evt);
            }
        });

        kValue.setEnabled(false);
        kValue.setFocusable(false);

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("k = ");

        jLabel14.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("for systematic sampling");

        defaultButton.setText("Default size");
        defaultButton.setAutoscrolls(true);
        defaultButton.setEnabled(false);
        defaultButton.setFocusable(false);
        defaultButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                defaultButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(sampleSizeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(defaultButton))
                                            .addComponent(editSampleButton)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(popSizeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editPopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(intButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(charButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editDataTypeButton))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(dataInput, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inputList, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(kValue, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)))
                        .addGap(15, 15, 15))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intButton)
                    .addComponent(charButton)
                    .addComponent(editDataTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(popSizeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPopButton))))
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataInput, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputList, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sampleSizeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(editSampleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultButton)))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void popSizeInput1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_popSizeInput1InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_popSizeInput1InputMethodTextChanged

    private void popSizeInput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popSizeInput1ActionPerformed
        // TODO add your handling code here:
        
        
        
        //popSizeInput.setFocusable(false);
        
    }//GEN-LAST:event_popSizeInput1ActionPerformed

    private void inputData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputData1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputData1ActionPerformed

    private void resultButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultButton1ActionPerformed
        // TODO add your handling code here:
       
        
    }//GEN-LAST:event_resultButton1ActionPerformed

    private void popSizeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popSizeInputActionPerformed
        // TODO add your handling code here:
        in = popSizeInput.getText();
    }//GEN-LAST:event_popSizeInputActionPerformed

    private void sampleSizeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleSizeInputActionPerformed
        // TODO add your handling code here:
        ss = sampleSizeInput.getText();
    }//GEN-LAST:event_sampleSizeInputActionPerformed

    private void popSizeInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_popSizeInputKeyReleased
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
      // Enter was pressed. Your code goes here.
            try {
                popSize = Integer.parseInt(in);
                if (popSize < 25){
                    JOptionPane.showMessageDialog(this,"Input Must Be Greater Than Or Equal To 25", "Error", JOptionPane.ERROR_MESSAGE);
                    popSizeInput.setText(""); 
                } else {
                    psIsDone = true;
                    if(dataIsDone == true){
                        data.clear();
                        inputList.removeAllItems();
                        dataInput.setEditable(true);
                        index = 1;
                    }
                    dataInput.setEnabled(true);
                    dataInput.setFocusable(true);
                    inputList.setEnabled(true);
                    inputList.setFocusable(true);
                    intButton.setEnabled(false);
                    charButton.setEnabled(false);
                    charButton.setFocusable(false);
                    intButton.setEnabled(false);
                    popSizeInput.setEditable(false);
                    popSizeInput.setFocusable(false);
                    popSizeInput.setEnabled(false);
                    psIsDone = true;

                }
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this,"Input Must Be Numeric", "Error", JOptionPane.ERROR_MESSAGE);
                popSizeInput.setText("");
            } 

        }
    }//GEN-LAST:event_popSizeInputKeyReleased

    private void popSizeInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_popSizeInputMouseClicked
        // TODO add your handling code here:
        popSizeInput.setText("");      
    }//GEN-LAST:event_popSizeInputMouseClicked

    private void intButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intButtonActionPerformed
        // TODO add your handling code here:
        resultViewed = false;
        if(intButton.isSelected()){
            dataType = 1;
            intButton.setEnabled(true);
            charButton.setEnabled(false);
            charButton.setFocusable(false);
            intButton.setEnabled(false);
            dtIsDone = true;  
        } 
        
        popSizeInput.setEnabled(true);
        popSizeInput.setFocusable(true);
        popSizeInput.setEditable(true);
        editPopButton.setEnabled(true);
        editPopButton.setFocusable(true);
        
    }//GEN-LAST:event_intButtonActionPerformed

    private void dataInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataInputActionPerformed
        // TODO add your handling code here:
        inData = dataInput.getText(); 
        if(this.isRerun == true || isUIRerun){
            data.clear();
            indexes.clear();
            samplingResult.clear();
            this.isRerun = false;
            this.isUIRerun = false;
        }
    }//GEN-LAST:event_dataInputActionPerformed

    private void dataInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataInputMouseClicked
        // TODO add your handling code here:
        dataInput.setText("");
        if(dataIsDone == true){
            data.clear();
            inputList.removeAllItems();
        }
        resultViewed = false;
    }//GEN-LAST:event_dataInputMouseClicked

    private void dataInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataInputKeyReleased
        // TODO add your handling code here:
       
         if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
      // Enter was pressed. Your code goes here.
            if(dataType == 1){
                int dataItem = 0;
               
                try {
                    dataItem = Integer.parseInt(inData);
                    if(dataItem < 0){
                        JOptionPane.showMessageDialog(this,"Input Should Not Be Of Negative Value", "Error", JOptionPane.ERROR_MESSAGE);
                        dataInput.setText("");
                    } else {
                       data.add(Integer.toString(dataItem));
                        indexes.add(index);
                        inputList.addItem("" + index + ": "+ Integer.toString(dataItem) );
                        dataInput.setText("");
                        index++; 
                    }
                    
                } catch(NumberFormatException e){
                    
                    JOptionPane.showMessageDialog(this,"Input Must Be an Integer", "Error", JOptionPane.ERROR_MESSAGE);
                    dataInput.setText("");
                } 
            } else {
               // String charItem = "";
                
                if(inData.length() > 1){
                    System.out.println("len > 1");
                    JOptionPane.showMessageDialog(this,"Input Must Be a Character", "Error", JOptionPane.ERROR_MESSAGE);
                    dataInput.setText("");
                } else {                    
                    
                   // if((inData.charAt(0) <= 'a' && inData.charAt(0) >= 'z') || (inData.charAt(0) <= 'A' && inData.charAt(0) >= 'Z')){
                    if(Character.isLetter(inData.charAt(0))){
                        
                        System.out.println("len < 1 && charChecking");
                        data.add(inData);
                        indexes.add(index);
                        inputList.addItem("" + index + ": " + inData);
                        dataInput.setText("");
                        index++;
                    } else {
                        System.out.println("len < 1 not char");
                        JOptionPane.showMessageDialog(this,"Input Must Be a Character", "Error", JOptionPane.ERROR_MESSAGE);
                        dataInput.setText("");
                    }
                }
                
            }
             if(index > popSize){
                dataInput.setFocusable(false);
                dataInput.setEnabled(false);
                dataInput.setEditable(false);
                dataIsDone = true;
                sampleSizeInput.setEnabled(true);
                sampleSizeInput.setFocusable(true);
                sampleSizeInput.setEditable(true);
                editSampleButton.setFocusable(true);
                editSampleButton.setEnabled(true);
                defaultButton.setEnabled(true);
                defaultButton.setFocusable(true);
                System.out.println(data);
                
            } 
        }
    }//GEN-LAST:event_dataInputKeyReleased

    private void inputListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputListActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_inputListActionPerformed

    private void charButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charButtonActionPerformed
        // TODO add your handling code here:
        resultViewed = false;
        if(charButton.isSelected()){
            dataType = 2;
            intButton.setEnabled(false);
            intButton.setFocusable(false);
            charButton.setEnabled(false);
            charButton.setFocusable(false);
            dtIsDone = true;
        }   
        popSizeInput.setEnabled(true);
        popSizeInput.setFocusable(true);
        popSizeInput.setEditable(true);
        editPopButton.setEnabled(true);
        editPopButton.setFocusable(true);
        
        
    }//GEN-LAST:event_charButtonActionPerformed

    private void editDataTypeButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editDataTypeButtonMouseReleased
        // TODO add your handling code here:
        resultViewed = false;
        if(dtIsDone == true){
            intButton.setFocusable(true);
            //charButton.setEnabled(true);
            charButton.setFocusable(true);
            intButton.setSelected(false);
            charButton.setSelected(false);
            charButton.setEnabled(true);
            intButton.setEnabled(true);
            popSizeInput.setEnabled(false);
            editPopButton.setEnabled(false);
            editPopButton.setFocusable(false);
            //popSizeInput.setEnabled(false);
            //popSizeInput.setFocusable(false);
            //editPopButton.setEnabled(false);
            //editPopButton.setFocusable(false);
            psIsDone = true;
            dtIsDone = false;
        }
        
       
    }//GEN-LAST:event_editDataTypeButtonMouseReleased

    private void editPopButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editPopButtonMouseReleased
        // TODO add your handling code here:
        resultViewed = false;
        if(dataIsDone == true && psIsDone == true){
            popSizeInput.setEnabled(true);
            popSizeInput.setFocusable(true);
            popSizeInput.setEditable(true);
            dataInput.setEnabled(false);
            dataInput.setFocusable(false);
            inputList.setEnabled(false);
            inputList.setFocusable(false);
            data.clear();
            popSizeInput.setText("");
            psIsDone = false;
        }
    }//GEN-LAST:event_editPopButtonMouseReleased

    private void sampleSizeInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sampleSizeInputMouseClicked
        // TODO add your handling code here:
        sampleSizeInput.setText("");
    }//GEN-LAST:event_sampleSizeInputMouseClicked

    private void sampleSizeInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sampleSizeInputKeyReleased
        // TODO add your handling code here:
         if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                sampleSize = Integer.parseInt(ss);
                if (sampleSize > popSize || sampleSize <= 0){
                    JOptionPane.showMessageDialog(this,"Input Must Be Lesser Than Or Equal To " + popSize + " and Greater than Zero", "Error", JOptionPane.ERROR_MESSAGE);
                    sampleSizeInput.setText(""); 
                } else {
                    psIsDone = true;
                    sampleSizeInput.setEditable(false);
                    sampleSizeInput.setFocusable(false);
                    sampleSizeInput.setEnabled(false);
                    ssIsDone = true;
                    if(method == 2 && ssIsDone == true){
                        k = popSize / sampleSize;
                        kValue.setFocusable(true);
                        kValue.setEnabled(true);
                        kValue.setEditable(false);
                        kValue.setText(Integer.toString(k));
                    } else {
                        kValue.setFocusable(false);
                        kValue.setEnabled(false);
                        kValue.setEditable(false);
                       // kValue.setText(Integer.toString(k));
                    }
                    resultButton.setEnabled(true);
                    resultButton.setFocusable(true);
                    

                }
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this,"Input Must Be Numeric", "Error", JOptionPane.ERROR_MESSAGE);
                popSizeInput.setText("");
            } 
         
         }
         
         
    }//GEN-LAST:event_sampleSizeInputKeyReleased

    private void resultButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultButtonMouseReleased
        // TODO add your handling code here:
       
       
    }//GEN-LAST:event_resultButtonMouseReleased

    private void resultButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultButtonMouseClicked
        // TODO add your handling code here:
    
        resultDisplay.setFocusable(true);
        resultDisplay.setEnabled(true);
        resultDisplay.setEditable(true);
        resultDisplay.setText("");
//        if(resultViewed == true){
//            samplingResult.clear();
//        }
        if(isResulted == false){
            //resultDisplay.clear();
            output = "";
            switch(method){
                case 1:
                    simpleRandomSampling();
                    isResulted = false;
                    break;
                case 2:
                    systematicRandomSampling();
                    isResulted = false;
                    break;
            }
        } 
    }//GEN-LAST:event_resultButtonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.setVisible(false);
        ExitMenu exMen = new ExitMenu(1);
        exMen.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void sampleSizeInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sampleSizeInputKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_sampleSizeInputKeyPressed

    private void editSampleButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editSampleButtonMouseReleased
        // TODO add your handling code here:
        resultViewed = false;
        sampleSizeInput.setFocusable(true);
        sampleSizeInput.setEnabled(true);
        sampleSizeInput.setEditable(true);
        kValue.setFocusable(false);
        kValue.setEnabled(false);
        resultDisplay.setText(null);
        resultDisplay.setFocusable(false);
        resultDisplay.setEditable(false);
        kValue.setText("");
        sampleSizeInput.setText("");
        samplingResult.clear();
    }//GEN-LAST:event_editSampleButtonMouseReleased

    private void defaultButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_defaultButtonMouseReleased
        // TODO add your handling code here:
        sampleSize = (int)(0.20 * popSize);
        sampleSizeInput.setText(""+sampleSize);
        sampleSizeInput.setEditable(false);
        sampleSizeInput.setFocusable(false);
        sampleSizeInput.setEnabled(false);
        defaultButton.setFocusable(true);
        defaultButton.setEnabled(true);
        if(method == 2){
            kValue.setFocusable(true);
            kValue.setEnabled(true);
            k = popSize / sampleSize;
            kValue.setText("" + k);
            kValue.setEditable(false);
        }
        resultButton.setFocusable(true);
        resultButton.setEnabled(true);
        
        
    }//GEN-LAST:event_defaultButtonMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton charButton;
    private javax.swing.JRadioButton charButton1;
    private javax.swing.JTextField dataInput;
    private javax.swing.JLabel dataTypeLabel1;
    private javax.swing.JButton defaultButton;
    private javax.swing.JComboBox<String> drpdwnInput1;
    private javax.swing.JButton editDataTypeButton;
    private javax.swing.JButton editPopButton;
    private javax.swing.JButton editSampleButton;
    private javax.swing.JTextArea finalResult1;
    private javax.swing.JTextField inputData1;
    private javax.swing.JComboBox<String> inputList;
    private javax.swing.JRadioButton intButton;
    private javax.swing.JRadioButton intButton1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField kValue;
    private javax.swing.JLabel popLabel1;
    private javax.swing.JTextField popSizeInput;
    private javax.swing.JTextField popSizeInput1;
    private javax.swing.JButton resultButton;
    private javax.swing.JButton resultButton1;
    private javax.swing.JTextArea resultDisplay;
    private javax.swing.JTextField sampleSizeInput;
    // End of variables declaration//GEN-END:variables

    public static int getRandomNumber(int num){
	return rand.nextInt(num) + 1;
    }

    public void simpleRandomSampling(){
        ArrayList<Integer> indexes = new ArrayList<Integer>();
        samplingResult.clear();
        for(int i = 0; i < sampleSize; i++){
            int random = getRandomNumber(popSize - 1);
                while(indexes.contains(random)){ 
                    random = getRandomNumber(popSize - 1);
                }

                //data.add(data.get(random)); 
                int num = random;
                samplingResult.add("[" + num + "]\t" + data.get(num - 1) );
                indexes.add(random);
        }
        String output = "";
        //Iterator<String> it = data.iterator();
        //Iterator<Integer> i = indexes.iterator();
        Iterator<String> it = samplingResult.iterator();
        while(it.hasNext()){
            String elem = it.next();
            output += elem + "\n"; 
        }
        
        resultDisplay.setText(output);

    }

    private void systematicRandomSampling() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
        samplingResult.clear();
        int r = getRandomNumber(k) + 1;
        //data.add(frame.get(r)); 
        samplingResult.add("[" + r + "]\t" + data.get(r-1));
        
        for(int j = 2; j <= sampleSize ; j++){
            r += k;
            samplingResult.add("[" + r + "]\t" + data.get(r-1));
        }
   /*     for(int i = 0; sampleSize > 0; i++, sampleSize--){
            r += k;  
            while(samplingResult.contains(r)){
                r += k;
                if(r >= popSize){
                        r -= popSize;
                }else{
                        r += 1;
                }
            }
            samplingResult.add("[" + r + "]\t" + data.get(r-1));
*/
   
        //}
        
        
        /*
        kuhaan ug size per array
        result = size * percent
        for(int i = 0; i < result; i++ {
            random(0-size);
            final.add(index) //final result
        
        */
        
        
            //Iterator<String> it = data.iterator();
            //Iterator<Integer> i = indexes.iterator();
        Iterator<String> it = samplingResult.iterator();
        while(it.hasNext()){
            String elem = it.next();
            output += elem + "\n"; 
        }
        resultDisplay.setText(output);
    }

    
}
