/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1;

import java.awt.event.KeyEvent;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Random;
import javax.swing.JOptionPane;
import static lab1.Input.data;
import static lab1.Input.indexes;
import static lab1.Input.samplingResult;

/**
 *
 * @author RizelleAnn
 */
public class Strata extends javax.swing.JFrame {
    private String in, inData;
    private int popSize, sampleSize;
    private int i=0;
    private int index = 1;
    private int dataType = 1;// [1] int [2] char
    private boolean dtIsDone = false, psIsDone = false, ssIsDone = false, dataIsDone = false;
    public static ArrayList<Integer> indexes = new ArrayList<Integer>();
    public static ArrayList<String> data = new ArrayList<String>();
    ArrayList<ArrayList<Sample>> arrOfarr = new ArrayList<ArrayList<Sample>>();
    ArrayList<Integer> arrInt = new ArrayList<Integer>(); 
    ArrayList<Integer> sorted = new ArrayList<Integer>();  
    ArrayList<Integer> strataSizes = new ArrayList<Integer>();
    ArrayList<Sample> stratSamples = new ArrayList<Sample>();

    private String ss = "";
    private int percentage;
    double p;
    Random random = new Random();
    
    /***********************/
    public LinkedList strata = new LinkedList();
    public LinkedList<LinkedList<Integer>> elements = new LinkedList<LinkedList<Integer>>();
    public int[] intFrame = null;
    public char[] charFrame = null;
    public LinkedList<Integer> samples = new LinkedList<Integer>();
    int a = 0;
    boolean reRun;
    /***********************/

    /**
     * Creates new form Strata
     */
    public Strata(boolean reRun) {
        this.reRun = reRun;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        intButton = new javax.swing.JRadioButton();
        charButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        popSizeInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dataInput = new javax.swing.JTextField();
        inputList = new javax.swing.JComboBox<>();
        percentLabel = new javax.swing.JLabel();
        percentageInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        resultButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultDisplay = new javax.swing.JTextArea();
        editSampleButton = new javax.swing.JButton();
        editDataTypeButton = new javax.swing.JButton();
        editPopButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayStrataArea = new javax.swing.JTextArea();
        displayStrataButton = new javax.swing.JButton();

        setTitle("Stratified Sampling Method");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("1. Type of data:");

        intButton.setBackground(new java.awt.Color(0, 0, 0));
        intButton.setForeground(new java.awt.Color(255, 255, 255));
        intButton.setText("Integer");
        intButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intButtonActionPerformed(evt);
            }
        });

        charButton.setBackground(new java.awt.Color(0, 0, 0));
        charButton.setForeground(new java.awt.Color(255, 255, 255));
        charButton.setText("Character");
        charButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charButtonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("2. Population size:");

        popSizeInput.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        popSizeInput.setText("pop size here...");
        popSizeInput.setEnabled(false);
        popSizeInput.setFocusable(false);
        popSizeInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                popSizeInputMouseClicked(evt);
            }
        });
        popSizeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popSizeInputActionPerformed(evt);
            }
        });
        popSizeInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                popSizeInputKeyReleased(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("3. Enter data:");

        dataInput.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        dataInput.setText("data here...");
        dataInput.setCaretPosition(0);
        dataInput.setEnabled(false);
        dataInput.setFocusable(false);
        dataInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataInputMouseClicked(evt);
            }
        });
        dataInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataInputActionPerformed(evt);
            }
        });
        dataInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dataInputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dataInputKeyTyped(evt);
            }
        });

        inputList.setEnabled(false);
        inputList.setFocusable(false);
        inputList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputListActionPerformed(evt);
            }
        });

        percentLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        percentLabel.setForeground(new java.awt.Color(255, 255, 255));
        percentLabel.setText("4. Percentage(%):");

        percentageInput.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        percentageInput.setText("percentage here..");
        percentageInput.setEnabled(false);
        percentageInput.setFocusable(false);
        percentageInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                percentageInputMouseClicked(evt);
            }
        });
        percentageInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageInputActionPerformed(evt);
            }
        });
        percentageInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                percentageInputKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("size >= 25");

        jLabel11.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("0 < size >= pop size");

        jLabel12.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("no negative value for integers; single character only for character data");

        resultButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        resultButton.setText("View Result");
        resultButton.setEnabled(false);
        resultButton.setFocusable(false);
        resultButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resultButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resultButtonMouseReleased(evt);
            }
        });

        resultDisplay.setColumns(20);
        resultDisplay.setFont(new java.awt.Font("Monospaced", 2, 13)); // NOI18N
        resultDisplay.setRows(5);
        resultDisplay.setText("result...");
        resultDisplay.setWrapStyleWord(true);
        resultDisplay.setEnabled(false);
        resultDisplay.setFocusable(false);
        jScrollPane1.setViewportView(resultDisplay);

        editSampleButton.setBackground(new java.awt.Color(204, 204, 204));
        editSampleButton.setText("Edit percentage");
        editSampleButton.setEnabled(false);
        editSampleButton.setFocusable(false);
        editSampleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editSampleButtonMouseReleased(evt);
            }
        });

        editDataTypeButton.setBackground(new java.awt.Color(204, 204, 204));
        editDataTypeButton.setText("Edit data type");
        editDataTypeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editDataTypeButtonMouseReleased(evt);
            }
        });

        editPopButton.setBackground(new java.awt.Color(204, 204, 204));
        editPopButton.setText("Edit pop size");
        editPopButton.setEnabled(false);
        editPopButton.setFocusable(false);
        editPopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editPopButtonMouseReleased(evt);
            }
        });

        jLabel6.setText("5. Percentage");

        displayStrataArea.setColumns(20);
        displayStrataArea.setRows(5);
        displayStrataArea.setText("strata...");
        displayStrataArea.setWrapStyleWord(true);
        displayStrataArea.setEnabled(false);
        displayStrataArea.setFocusable(false);
        jScrollPane2.setViewportView(displayStrataArea);

        displayStrataButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        displayStrataButton.setText("Display Strata");
        displayStrataButton.setEnabled(false);
        displayStrataButton.setFocusable(false);
        displayStrataButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                displayStrataButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(percentLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(percentageInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .addComponent(dataInput, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(inputList, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editSampleButton))))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(popSizeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(editPopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(intButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(charButton)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(editDataTypeButton)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(displayStrataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editDataTypeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(intButton)
                                .addComponent(charButton)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(popSizeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editPopButton))
                        .addGap(23, 23, 23)
                        .addComponent(jLabel12)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputList, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataInput, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(percentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(percentageInput, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(editSampleButton)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(displayStrataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 621, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void intButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intButtonActionPerformed
        // TODO add your handling code here:
        if(intButton.isSelected()){
            dataType = 1;
            intButton.setEnabled(true);
            charButton.setEnabled(false);
            charButton.setFocusable(false);
            intButton.setEnabled(false);
            dtIsDone = true;
        }

        popSizeInput.setEnabled(true);
        popSizeInput.setFocusable(true);
        popSizeInput.setEditable(true);
        editPopButton.setEnabled(true);
        editPopButton.setFocusable(true);

    }//GEN-LAST:event_intButtonActionPerformed

    private void charButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charButtonActionPerformed
        // TODO add your handling code here:
        if(charButton.isSelected()){
            dataType = 2;
            intButton.setEnabled(false);
            intButton.setFocusable(false);
            charButton.setEnabled(false);
            charButton.setFocusable(false);
            dtIsDone = true;
        }
        popSizeInput.setEnabled(true);
        popSizeInput.setFocusable(true);
        popSizeInput.setEditable(true);
        editPopButton.setEnabled(true);
        editPopButton.setFocusable(true);

    }//GEN-LAST:event_charButtonActionPerformed

    private void popSizeInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_popSizeInputMouseClicked
        // TODO add your handling code here:
        popSizeInput.setText("");
    }//GEN-LAST:event_popSizeInputMouseClicked

    private void popSizeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popSizeInputActionPerformed
        // TODO add your handling code here:
        in = popSizeInput.getText();
    }//GEN-LAST:event_popSizeInputActionPerformed

    private void popSizeInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_popSizeInputKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            try {
                popSize = Integer.parseInt(in);
                if (popSize < 25){
                    JOptionPane.showMessageDialog(this,"Input Must Be Greater Than Or Equal To 25", "Error", JOptionPane.ERROR_MESSAGE);
                    popSizeInput.setText("");
                } else {
                    if(dataIsDone == true){
                        data.clear();
                        inputList.removeAll();
                        
                    }
                    psIsDone = true;
                    dataInput.setEnabled(true);
                    dataInput.setFocusable(true);
                    dataInput.setEditable(true);
                    inputList.setEnabled(true);
                    inputList.setFocusable(true);
                    intButton.setEnabled(false);
                    charButton.setEnabled(false);
                    charButton.setFocusable(false);
                    intButton.setEnabled(false);
                    popSizeInput.setEditable(false);
                    popSizeInput.setFocusable(false);
                    popSizeInput.setEnabled(false);
                    

                }
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this,"Input Must Be Numeric", "Error", JOptionPane.ERROR_MESSAGE);
                popSizeInput.setText("");
            }

        }
    }//GEN-LAST:event_popSizeInputKeyReleased

    private void dataInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataInputMouseClicked
        // TODO add your handling code here:
        dataInput.setText("");
        if(dataIsDone == true){
            data.clear();
            inputList.removeAllItems();
            index = 1;
        }
       
    }//GEN-LAST:event_dataInputMouseClicked

    private void dataInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataInputActionPerformed
        // TODO add your handling code here:
        inData = dataInput.getText();
        if(this.reRun == true ){
            data.clear();
            indexes.clear();
            samplingResult.clear();
            this.reRun = false;
            //this.isUIRerun = false;
        }
    }//GEN-LAST:event_dataInputActionPerformed

    private void dataInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataInputKeyReleased
        // TODO add your handling code here:
       
            
        
    if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
        // Enter was pressed. Your code goes here.


            if(dataType == 1){
                int dataItem = 0;
                intFrame = new int[popSize];
                try {
                    dataItem = Integer.parseInt(inData);
                    if(dataItem < 0){
                        JOptionPane.showMessageDialog(this,"Input Should Not Be Of Negative Value", "Error", JOptionPane.ERROR_MESSAGE);
                        dataInput.setText("");
                    } else {
                        
                        intFrame[a] = dataItem;
                        a++;
                        data.add(Integer.toString(dataItem));
                        indexes.add(index);
                        inputList.addItem("" + index + ": "+ Integer.toString(dataItem) );
                        dataInput.setText("");
                        index++; 
                    }
                } catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(this,"Input Must Be an Integer", "Error", JOptionPane.ERROR_MESSAGE);
                    dataInput.setText("");
                }
            } else {
                // String charItem = "";
                charFrame = new char[popSize];
                if(inData.length() > 1){
                    System.out.println("len > 1");
                    JOptionPane.showMessageDialog(this,"Input Must Be a Character", "Error", JOptionPane.ERROR_MESSAGE);
                    dataInput.setText("");
                } else {

                    if(Character.isLetter(inData.charAt(0))){

                        System.out.println("len < 1 && charChecking");
                        charFrame[a] = inData.charAt(0);
                        a++;
                        data.add(inData);
                        indexes.add(index);
                        inputList.addItem("" + index + ": " + inData);
                        dataInput.setText("");
                        index++;
                    } else {
                        System.out.println("len < 1 not char");
                        JOptionPane.showMessageDialog(this,"Input Must Be a Character", "Error", JOptionPane.ERROR_MESSAGE);
                        dataInput.setText("");
                    }
                }

            }

            if(index > popSize){
                dataInput.setFocusable(false);
                dataInput.setEnabled(false);
                dataInput.setEditable(false);
                displayStrataButton.setFocusable(true);
                displayStrataButton.setEnabled(true);
                dataIsDone = true;

                if(dataType == 1){
                    for(int i = 0; i < Array.getLength(intFrame); i++){
                        System.out.println("[" + i + "] : " + intFrame[i]);
                       
                    }

                }else if(dataType == 2){
                    for(int i = 0; i < Array.getLength(charFrame); i++){
                        System.out.println("[" + i + "] : " + charFrame[i]);
                        
                    }
                }
               
            }
            
        }


    }//GEN-LAST:event_dataInputKeyReleased

    private void inputListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputListActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_inputListActionPerformed

    private void percentageInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_percentageInputMouseClicked
        // TODO add your handling code here:
        percentageInput.setText("");
    }//GEN-LAST:event_percentageInputMouseClicked

    private void percentageInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageInputActionPerformed
        // TODO add your handling code here:
        ss = percentageInput.getText();
    }//GEN-LAST:event_percentageInputActionPerformed

    private void percentageInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_percentageInputKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                percentage = Integer.parseInt(ss);
                if (percentage >= 100 || percentage <= 0){
                    JOptionPane.showMessageDialog(this,"Percentage Must Be Lesser Than Or Equal To 100% and Greater than Zero", "Error", JOptionPane.ERROR_MESSAGE);
                    percentageInput.setText("");
                } else {
                    psIsDone = true;
                    percentageInput.setEditable(false);
                    percentageInput.setFocusable(false);
                    percentageInput.setEnabled(false);
                    ssIsDone = true;
                    
                    resultButton.setEnabled(true);
                    resultButton.setFocusable(true);
                    
              
                }
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this,"Input Must Be Numeric", "Error", JOptionPane.ERROR_MESSAGE);
                popSizeInput.setText("");
            }

        }

    }//GEN-LAST:event_percentageInputKeyReleased

    private void resultButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultButtonMousePressed
        // TODO add your handling code here:
        resultDisplay.setFocusable(true);
        resultDisplay.setEnabled(true);
        resultDisplay.setText("");
    }//GEN-LAST:event_resultButtonMousePressed

    private void resultButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultButtonMouseReleased
        // TODO add your handling code here:
      
       // arrOfarr -> where the stratas are stored
        String str = "";
        ArrayList<Integer> mana = new ArrayList<Integer>();
        
        /******DEBUG*****/
        System.out.println("\n\n\n\narrOfarr Size: " + arrOfarr.size());
        for(ArrayList<Sample> s : arrOfarr){
            System.out.println("=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*");
            for(Sample sam : s){
                System.out.println("[" + sam.index() + "]" + " : " + sam.varInt());  
            }
        }
        /****************/
        
        ArrayList<Integer> pila = new ArrayList<Integer>();
        for(ArrayList<Sample> samp : arrOfarr){
            int pilaKabuok = (int) Math.ceil(((double) samp.size())* ((double) percentage * 0.01)); // pilaKabuok is pila kabuok kuhaon for each strata
            pila.add(pilaKabuok);
        }
            
        int counter = 0;
        int strataGroup = 1;
        for(ArrayList<Sample> samp : arrOfarr){   
            str += "Strata " + strataGroup + " : " + pila.get(counter);
            if(pila.get(counter) > 1){
                str += " items\n";
            }else{
                str += " item\n";
            }
            for(int count = 0; count < pila.get(counter); count++){
               Sample value = samp.get(random.nextInt(samp.size()));
               while(mana.contains(value.index)){
                   value = samp.get(random.nextInt(samp.size()));
               }
               
               if(dataType == 1){
                   str += "\t" + value.index + " : " + value.varInt;
               }else if(dataType == 2){
                   str += "\t" + value.index + " : " + value.varChar;
               }
               mana.add(value.index);
              str += "\n";
           }
          
           mana.clear();
           str += "\n\n";
           counter++;
           strataGroup++;
       }
        
        
        resultDisplay.setEditable(false);
        resultDisplay.setText(str);
        resultDisplay.setEditable(false);
        resultDisplay.setVisible(true);
        a = 0;

    }//GEN-LAST:event_resultButtonMouseReleased

    private void editDataTypeButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editDataTypeButtonMouseReleased
        // TODO add your handling code here:

        if(dtIsDone == true){
            intButton.setFocusable(true);
            //charButton.setEnabled(true);
            charButton.setFocusable(true);
            intButton.setSelected(false);
            charButton.setSelected(false);
            charButton.setEnabled(true);
            intButton.setEnabled(true);
            popSizeInput.setEnabled(false);
            editPopButton.setEnabled(false);
            editPopButton.setFocusable(false);
            psIsDone = false;
            dtIsDone = false;
        }

    }//GEN-LAST:event_editDataTypeButtonMouseReleased

    private void editPopButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editPopButtonMouseReleased
        // TODO add your handling code here:

        /*if(dtIsDone == true && psIsDone == true){
            data.clear();
            inputList.removeAll();
            popSizeInput.setEnabled(true);
            popSizeInput.setFocusable(true);
            popSizeInput.setEditable(true);
            dataInput.setEnabled(false);
            dataInput.setFocusable(false);
            inputList.setEnabled(false);
            inputList.setFocusable(false);
            popSizeInput.setText("");
            psIsDone = false;
        }*/
        
        //resultViewed = false;
        if(dataIsDone == true && psIsDone == true){
            popSizeInput.setEnabled(true);
            popSizeInput.setFocusable(true);
            popSizeInput.setEditable(true);
            dataInput.setEnabled(false);
            dataInput.setFocusable(false);
            inputList.setEnabled(false);
            inputList.setFocusable(false);
            data.clear();
            inputList.removeAllItems();
            popSizeInput.setText("");
            psIsDone = false;
        }
    }//GEN-LAST:event_editPopButtonMouseReleased

    private void displayStrataButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayStrataButtonMouseReleased
        // TODO add your handling code here:
        displayStrataArea.setFocusable(true);
        displayStrataArea.setEnabled(true);
        displayStrataArea.setText("");
        if(dataType == 1){
            sortSampleInt();
        } else {
            sortSampleChar();
        }
        
        percentageInput.setEnabled(true);
        percentageInput.setFocusable(true);
        percentageInput.setEditable(true);
        displayStrataArea.setEditable(false);
        editSampleButton.setFocusable(true);
        editSampleButton.setEnabled(true);
    }//GEN-LAST:event_displayStrataButtonMouseReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.setVisible(false);
        ExitMenu exMen = new ExitMenu(2);
        exMen.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void editSampleButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editSampleButtonMouseReleased
        // TODO add your handling code here:
        percentageInput.setFocusable(true);
        percentageInput.setEnabled(true);
        percentageInput.setEditable(true);
        percentageInput.setText("");
        resultButton.setFocusable(false);
        resultButton.setEnabled(false);
    }//GEN-LAST:event_editSampleButtonMouseReleased

    private void dataInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataInputKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_dataInputKeyTyped

    /**
     * @param args the command line arguments
     */
   /* public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Strata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Strata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Strata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Strata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Strata().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton charButton;
    private javax.swing.JTextField dataInput;
    private javax.swing.JTextArea displayStrataArea;
    private javax.swing.JButton displayStrataButton;
    private javax.swing.JButton editDataTypeButton;
    private javax.swing.JButton editPopButton;
    private javax.swing.JButton editSampleButton;
    private javax.swing.JComboBox<String> inputList;
    private javax.swing.JRadioButton intButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel percentLabel;
    private javax.swing.JTextField percentageInput;
    private javax.swing.JTextField popSizeInput;
    private javax.swing.JButton resultButton;
    private javax.swing.JTextArea resultDisplay;
    // End of variables declaration//GEN-END:variables
    
    
    /*private void stratifiedSampling() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        if(dataType == 1){//int
            for(int j = 0; j < popSize; j++){
                sorted.add(Integer.parseInt(data.get(j)));
            }
            Collections.sort(arrInt);
            int indexArr[] = new int[popSize];
            for(int n = 0; n < popSize; n++){
                indexArr[n] = sorted.indexOf(arrInt.get(n));
            }
            
            for(int j = 0; j < popSize; j++){
                if(sorted.get(j) != sorted.get(j+1)){
                    arrOfarr.add(arrInt);
                }
                arrInt.add(sorted.get(j));
            }
        }
        
        if(dataType == 1){
            
        }
    }*/
    private void sortSampleChar(){
        ArrayList<Integer> arrOfSizes = new ArrayList<Integer>();
        String stratum = "";
//        char prev = ' ';
        
        int m = 0;
        
        ArrayList<Sample> sampChar = new ArrayList<Sample>();
        for(int j = 1; j <= popSize; j++){
            char charVal = data.get(j-1).charAt(0);
            Sample s = new Sample(j, charVal);
            stratSamples.add(s);
        }
        
        Collections.sort(stratSamples, Sample.sortChar);
        int prev = stratSamples.get(0).varChar;
        int size2 = 0;
        m = 1;
        stratum += "\nStrata " + m + ":\n";
        for(Sample s: stratSamples){
           
            if(prev != s.varChar()){  
                 m++;
             stratum += "\nStrata " + m + ":\n";
                arrOfarr.add(sampChar);
                arrOfSizes.add(sampChar.size());
                sampChar = new ArrayList<Sample>();
                size2++;
                sampChar.add(s);
                prev = s.varChar();
            } else {
                sampChar.add(s);
                prev = s.varChar();
            }
            System.out.println(s.index() + ": " + s.varChar());
            stratum += "  ["+ s.index()+ "]\t" + s.varChar() + "\n";
           displayStrataArea.setText(stratum);
           strataSizes.add(size2);
           size2 = 0;
        }
       arrOfarr.add(sampChar);
       
        
    }
    
    private int getPercentageperStratum(int size){
       return (int)((percentage * 0.1) * size); 
    }
    
    private ArrayList<Sample> randomFinalSamples(ArrayList<Sample> sampleArr){
        ArrayList<Sample> finalOutput = new ArrayList<Sample>();
        
        return finalOutput;
    }
    
    private void sortSampleInt(){
       System.out.println("************************************************************************************************");
       String stratum = "";
       int m = 0;
       ArrayList<Sample> sampInt = new ArrayList<Sample>();
        
       for(int j = 0; j < popSize; j++) {
           int intVal = Integer.parseInt(data.get(j));
           Sample s = new Sample(j, intVal);
           stratSamples.add(s);
       }
       
       
       Collections.sort(stratSamples, Sample.sortInt);
       int prev = stratSamples.get(0).varInt;
       int size = 0;
       m = 1;
       stratum += "\nStrata " + m + ":\n";
       for(Sample s: stratSamples){  
           
           if(prev != s.varInt()){
               m++;
           stratum += "\nStrata " + m + ":\n";
               System.out.println("----------------------------------");
               System.out.println("Strata " + m);
               System.out.println(s.index() + ": " + s.varInt());
               
               arrOfarr.add(sampInt);
               size += 1;
               System.out.println(s.varInt() + "added!");
               
               sampInt = new ArrayList<Sample>();
               sampInt.add(s);
               prev = s.varInt();
           } else {
               sampInt.add(s);
//               stratum += "["+ s.index()+ "] " + s.varInt() + "\n";
               System.out.println(s.index() + ": " + s.varInt());
               System.out.println(s.varInt() + "is added!");
//               System.out.println("added!");
                prev = s.varInt();
           } 
           
           
            stratum += "  ["+ s.index()+ "]\t" + s.varInt() + "\n";
           displayStrataArea.setText(stratum);
           strataSizes.add(size);
           size = 0;
       }
       arrOfarr.add(sampInt);
        System.out.println("----------------------------------\n\n");
       
       //Iterator<String> it = 
               
        for (ArrayList<Sample> l1 : arrOfarr) {
            for (Sample n : l1) {
                System.out.print(n.index() + ": " + n.varInt() + "\n"); 
            }
        }
   }

    
   public ArrayList<Integer> random(int size, int sample){
        ArrayList<Integer> temp = new ArrayList<Integer>(), ret = new ArrayList<Integer>();
        for(int i = 0; i < size;  i++){
                temp.add(new Integer(i));
        }

        Collections.shuffle(temp);

        for(int i = 0; i < sample; i++){
                ret.add(temp.get(i));
        }

        return ret;
}
}

class Sample {
	int index;
	char varChar;
	int varInt;

	Sample(int index, char varChar){
		this.index = index;
		this.varChar = varChar;
	}

	Sample(int index, int varInt){
		this.index = index;
		this.varInt = varInt;
	}

	public int varInt(){
            return varInt;
	}

	public char varChar(){
            return varChar;
	}

	public int index(){
            return index;
	}
        
        public static Comparator<Sample> sortInt = new Comparator<Sample>() {

	public int compare(Sample s1, Sample s2) {
	   int sam1 = s1.varInt();
	   int sam2 = s2.varInt();
	   return sam1-sam2;
        }};
        
        public static Comparator<Sample> sortChar = new Comparator<Sample>() {
            @Override
            public int compare(Sample s1, Sample s2) {
                char char1 = s1.varChar();//.toUpperCase();
                char char2 = s2.varChar();//.toUpperCase();
                return char1-char2;
            }
        };
}


//END
//}
