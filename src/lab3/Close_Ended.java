/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab3;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author apple
 */
public class Close_Ended extends javax.swing.JFrame {

    int size, frequencies, counter = 0;
    Double lowerLimit, upperLimit;
    Double fixi2, midpoint, fixi, deviation;
    ArrayList<Double> lowerLimits = new ArrayList<>();
    ArrayList<Double> upperLimits = new ArrayList<>();
    ArrayList<Integer> frequencyList = new ArrayList<>();
    ArrayList<Double> xis = new ArrayList<>();
    ArrayList<Double> fixis = new ArrayList<>();
    ArrayList<Double> fixi2s = new ArrayList<>();
    String title;
    
    /**
     * Creates new form Closed_Ended
     */
    public Close_Ended() {
        initComponents();
    }
    
    public Close_Ended(int num, String title){
        size = num;
        this.title = title;
        initComponents();
        this.setTitle(title);
    }
    
    public Close_Ended(Close_Ended ce){
        lowerLimits = ce.lowerLimits;
        upperLimits = ce.upperLimits;
        frequencyList = ce.frequencyList;
        xis = ce.xis;
        fixis = ce.fixis;
        fixi2s = ce.fixi2s;
        title = ce.title;
        initComponents();
        this.setTitle(title);
        setEnabledFalse();
        fillTable();
    }
    
    private void setEnabledFalse(){
        lowerClassLimit.setEnabled(false);
        upperClassLimit.setEnabled(false);
        frequency.setEnabled(false);
        editLowerClassLimit.setEnabled(false);
        editUpperClassLimit.setEnabled(false);
        editFrequency.setEnabled(false);
        continueButton.setEnabled(false);
    }

    private void fillTable(){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Object rowData[] = new Object[6];
        for(int i = 0; i < lowerLimits.size(); i++){
            rowData[0] = lowerLimits.get(i);
            rowData[1] = upperLimits.get(i);
            rowData[2] = frequencyList.get(i);
            rowData[3] = xis.get(i);
            rowData[4] = fixis.get(i);
            rowData[5] = fixi2s.get(i);
            model.addRow(rowData); 
        }
        rowData[0] = "";
        rowData[1] = "";
        rowData[2] = "n: " + addFrequencies();
        rowData[3] = "";
        rowData[4] = "∑fixi:" + addFixis();
        rowData[5] = "∑(fixi2): " + addFixi2();
        model.addRow(rowData);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lowerClassLimit = new javax.swing.JTextField();
        upperClassLimit = new javax.swing.JTextField();
        frequency = new javax.swing.JTextField();
        editLowerClassLimit = new javax.swing.JButton();
        continueButton = new javax.swing.JButton();
        editFrequency = new javax.swing.JButton();
        editUpperClassLimit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        computeMeanButton = new javax.swing.JButton();
        computeMedianButton = new javax.swing.JButton();
        computeModeButton = new javax.swing.JButton();
        computeAllButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocation(new java.awt.Point(400, 70));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Enter class limits and corresponding frequency:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setText("Lower Class Limit");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Upper Class Limit");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Frequency");

        lowerClassLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lowerClassLimitKeyReleased(evt);
            }
        });

        upperClassLimit.setEnabled(false);
        upperClassLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                upperClassLimitKeyReleased(evt);
            }
        });

        frequency.setEnabled(false);
        frequency.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                frequencyKeyReleased(evt);
            }
        });

        editLowerClassLimit.setText("Edit");
        editLowerClassLimit.setEnabled(false);
        editLowerClassLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLowerClassLimitActionPerformed(evt);
            }
        });

        continueButton.setText("Continue");
        continueButton.setEnabled(false);
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        editFrequency.setText("Edit");
        editFrequency.setEnabled(false);
        editFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFrequencyActionPerformed(evt);
            }
        });

        editUpperClassLimit.setText("Edit");
        editUpperClassLimit.setEnabled(false);
        editUpperClassLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUpperClassLimitActionPerformed(evt);
            }
        });

        table.setBorder(new javax.swing.border.MatteBorder(null));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "   Lower Bound", "  Upper Bound", "       Frequency", "        Midpoint", "              fixi", "             fixi2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
            table.getColumnModel().getColumn(5).setResizable(false);
        }

        computeMeanButton.setText("Compute For Mean");
        computeMeanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeMeanButtonActionPerformed(evt);
            }
        });

        computeMedianButton.setText("Compute For Median");
        computeMedianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeMedianButtonActionPerformed(evt);
            }
        });

        computeModeButton.setText("Compute For Mode");
        computeModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeModeButtonActionPerformed(evt);
            }
        });

        computeAllButton.setText("Compute For All Measures");
        computeAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(continueButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lowerClassLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editLowerClassLimit)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(upperClassLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(editUpperClassLimit)
                                .addGap(41, 41, 41)
                                .addComponent(frequency, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editFrequency))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(jLabel4))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(computeMeanButton)
                        .addGap(26, 26, 26)
                        .addComponent(computeMedianButton)
                        .addGap(18, 18, 18)
                        .addComponent(computeModeButton)
                        .addGap(18, 18, 18)
                        .addComponent(computeAllButton)))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowerClassLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upperClassLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editLowerClassLimit)
                    .addComponent(editFrequency)
                    .addComponent(editUpperClassLimit))
                .addGap(18, 18, 18)
                .addComponent(continueButton)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(70, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(computeMeanButton)
                            .addComponent(computeMedianButton)
                            .addComponent(computeModeButton)
                            .addComponent(computeAllButton))
                        .addGap(27, 27, 27))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        MainMenu main = new MainMenu();
        this.setVisible(false);
        main.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void lowerClassLimitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lowerClassLimitKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{
                Double input = Double.parseDouble(lowerClassLimit.getText());
                if(counter >= 1){
                    if(input <= lowerLimits.get(counter-1) || input <= upperLimits.get(counter-1)){
                        JOptionPane.showMessageDialog(this, "Input must be greater than previous interval.", "Error", JOptionPane.ERROR_MESSAGE);
                        lowerClassLimit.setText("");
                    }else{
                        lowerLimit = input;
                        lowerClassLimit.setEnabled(false);
                        upperClassLimit.setEnabled(true);
                        upperClassLimit.setFocusable(true);
                        lowerClassLimit.setFocusable(false);
                        editLowerClassLimit.setEnabled(true);
                        System.out.println("lowerLimit: " + lowerLimit);
                        }
                }else{
                    lowerLimit = input;
                    lowerClassLimit.setEnabled(false);
                    upperClassLimit.setEnabled(true);
                    upperClassLimit.setFocusable(true);
                    lowerClassLimit.setFocusable(false);
                    editLowerClassLimit.setEnabled(true);
                    System.out.println("lowerLimit: " + lowerLimit);
                }
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Input must be numeric.", "Error", JOptionPane.ERROR_MESSAGE);
                lowerClassLimit.setText("");
            }
        }
    }//GEN-LAST:event_lowerClassLimitKeyReleased

    private void upperClassLimitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_upperClassLimitKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{ 
                Double input = Double.parseDouble(upperClassLimit.getText());
                if(counter >= 1){
                    if(input <= upperLimits.get(counter-1) || input <= lowerLimits.get(counter-1) || input <= lowerLimit){
                        JOptionPane.showMessageDialog(this, "Input must be greater than previous interval.", "Error", JOptionPane.ERROR_MESSAGE);
                        upperClassLimit.setText("");
                    }else{
                        upperLimit = input;
                        upperClassLimit.setEnabled(false);
                        frequency.setEnabled(true);
                        frequency.setFocusable(true);
                        upperClassLimit.setFocusable(false);
                        editUpperClassLimit.setEnabled(true);
                        System.out.println("upperLimit: " + upperLimit);
                    }
                }else{
                    if(input <= lowerLimit){
                        JOptionPane.showMessageDialog(this, "Input must be greater than the lower class limit.", "Error", JOptionPane.ERROR_MESSAGE);
                        upperClassLimit.setText("");
                    }else{
                        upperLimit = input;
                        upperClassLimit.setEnabled(false);
                        frequency.setEnabled(true);
                        frequency.setFocusable(true);
                        upperClassLimit.setFocusable(false);
                        editUpperClassLimit.setEnabled(true);
                        System.out.println("upperLimit: " + upperLimit);
                    }
                }
                
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Input must be numeric.", "Error", JOptionPane.ERROR_MESSAGE);
                upperClassLimit.setText("");
            }
        }
    }//GEN-LAST:event_upperClassLimitKeyReleased

    private void frequencyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_frequencyKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{
                int data = Integer.parseInt(frequency.getText());
                if(data <= 0){
                    JOptionPane.showMessageDialog(this, "Input must be greater than or equal to 0.", "Error", JOptionPane.ERROR_MESSAGE);
                    frequency.setText("");
                }else{
                    frequencies = data;
                    frequency.setEnabled(false);
                    frequency.setFocusable(false);
                    editLowerClassLimit.setEnabled(true);
                    continueButton.setEnabled(true);
                    editFrequency.setEnabled(true);
                    System.out.println("frequency: " + frequencies);
                }
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Input must be numeric", "Error", JOptionPane.ERROR_MESSAGE);
                frequency.setText("");
            }
        }
    }//GEN-LAST:event_frequencyKeyReleased

    private void editLowerClassLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLowerClassLimitActionPerformed
        lowerClassLimit.setEnabled(true);
        lowerClassLimit.setFocusable(true);
        continueButton.setEnabled(false);
        frequency.setEnabled(false);
        upperClassLimit.setEnabled(false);
    }//GEN-LAST:event_editLowerClassLimitActionPerformed

    private void editFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFrequencyActionPerformed
        frequencyList.remove(frequencyList.size());
        frequency.setEnabled(true);
        frequency.setFocusable(true);
        continueButton.setEnabled(false);
        lowerClassLimit.setEnabled(false);
        upperClassLimit.setEnabled(false);
    }//GEN-LAST:event_editFrequencyActionPerformed

    private void editUpperClassLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUpperClassLimitActionPerformed
        upperClassLimit.setEnabled(true);
        upperClassLimit.setFocusable(true);
        continueButton.setEnabled(false);
        lowerClassLimit.setEnabled(false);
        frequency.setEnabled(false);
    }//GEN-LAST:event_editUpperClassLimitActionPerformed

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Object rowData[] = new Object[6];
        if(counter < size){
            lowerLimits.add(lowerLimit);
            upperLimits.add(upperLimit);
            frequencyList.add(frequencies);
            midpoint = computeXi(lowerLimit, upperLimit);
            fixi = computeFixi(midpoint, frequencies);
            fixi2 = computeFixi2(midpoint, frequencies);
            
            rowData[0] = lowerLimit;
            rowData[1] = upperLimit;
            rowData[2] = frequencies;
            rowData[3] = midpoint;
            rowData[4] = fixi;
            rowData[5] = fixi2;
            
            model.addRow(rowData);
            counter++;
            xis.add(midpoint);
            fixis.add(fixi);
            fixi2s.add(fixi2);
            System.out.println("midpoint: " + midpoint);
            System.out.println("fixi: " + fixi);
            System.out.println("fixi2: " + fixi2 + "\n");
            
            lowerClassLimit.setEnabled(true);
            lowerClassLimit.setFocusable(true);
            lowerClassLimit.setText("");
            upperClassLimit.setText("");
            frequency.setText("");
        }
        
        if(counter == size){
            lowerClassLimit.setEnabled(false);
            upperClassLimit.setEnabled(false);
            frequency.setEnabled(false);
            editLowerClassLimit.setEnabled(false);
            editUpperClassLimit.setEnabled(false);
            editFrequency.setEnabled(false);
            continueButton.setEnabled(false);
            
            rowData[0] = "";
            rowData[1] = "";
            rowData[2] = "n: " + addFrequencies();
            rowData[3] = "";
            rowData[4] = "∑fixi:" + addFixis();
            rowData[5] = "∑(fixi2): " + addFixi2();
            model.addRow(rowData);
        }
    }//GEN-LAST:event_continueButtonActionPerformed

    private void computeMeanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeMeanButtonActionPerformed
        Mean mean = new Mean(this, addFixis(), addFrequencies(), addFixi2());
        this.setVisible(false);
        mean.setVisible(true);
    }//GEN-LAST:event_computeMeanButtonActionPerformed

    private void computeMedianButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeMedianButtonActionPerformed
        JOptionPane.showMessageDialog(this, "Median not computed.");
    }//GEN-LAST:event_computeMedianButtonActionPerformed

    private void computeModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeModeButtonActionPerformed
        ModeClose_Ended mode = new ModeClose_Ended(this, addFrequencies());
        this.setVisible(false);
        mode.setVisible(true);
    }//GEN-LAST:event_computeModeButtonActionPerformed

    private void computeAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeAllButtonActionPerformed
        ComputeAllClose all = new ComputeAllClose(this, addFixis(), addFrequencies(), addFixi2());
        this.setVisible(false);
        all.setVisible(true);
    }//GEN-LAST:event_computeAllButtonActionPerformed
   
    private Double computeXi(Double lowerLimit, Double upperLimit){
        return (Double) ((lowerLimit + upperLimit) / 2);
    }
    
    private Double computeFixi(Double midpoint, int frequency){
        return (Double) (midpoint * frequency);
    }
    
    private Double computeFixi2(Double midpoint, int frequency){
        return (frequency * Math.pow(midpoint, 2));
    }
    
    private int addFrequencies(){
        int total = 0;
        for(int x : frequencyList){
            total += x;
        }
        return total;
    }
    
    private Double addFixis(){
        Double total = 0.0;
        for(Double x : fixis){
            total += x;
        }
        return total;
    }
    
    private Double addFixi2(){
        Double total = 0.0;
        for(Double x : fixi2s){
            total += x;
        }
        return total;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Close_Ended.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Close_Ended.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Close_Ended.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Close_Ended.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Close_Ended().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton computeAllButton;
    private javax.swing.JButton computeMeanButton;
    private javax.swing.JButton computeMedianButton;
    private javax.swing.JButton computeModeButton;
    private javax.swing.JButton continueButton;
    private javax.swing.JButton editFrequency;
    private javax.swing.JButton editLowerClassLimit;
    private javax.swing.JButton editUpperClassLimit;
    private javax.swing.JTextField frequency;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lowerClassLimit;
    private javax.swing.JTable table;
    private javax.swing.JTextField upperClassLimit;
    // End of variables declaration//GEN-END:variables
}
