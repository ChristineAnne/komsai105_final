/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author localuser
 */
public class RawData extends javax.swing.JFrame {
    private float meanres = 0;
    private static String title;
    private static String dataType;
    private ArrayList<String> dataArr;
    private float[] fdata;
    private int[] idata;
    private Ungrouped data;
    private String mean;
    private String median;
    private String mode = "";
    private String s;
    private String s2;
    private String range;
    private String modeType;
    private int size;
    float[] fsorted;
    int[] isorted ;
    float sres = 0;
    //double meanres = 0.0;
    /**
     * Creates new form RawData
     */
    public RawData(String title, String dataType, float[] fdata,Ungrouped data,int size) {
        this.title = title;
        this.dataType = dataType;
        this.fdata = fdata;
        this.data = data;
        this.size = size;
        initComponents();
        this.setTextArea();
    }
        
    
    public RawData(String title, String dataType, int[] idata, Ungrouped data,int size) {
        this.title = title;
        this.dataType = dataType;
        this.idata = idata;
        this.data = data;
        this.size = size;
        initComponents();
        this.setTextArea();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Fora Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataArea = new javax.swing.JTextArea();
        editBtn = new javax.swing.JButton();
        contBtn = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ungrouped (Raw Data)");

        jPanel2.setToolTipText("");

        dataArea.setEditable(false);
        dataArea.setColumns(20);
        dataArea.setRows(5);
        jScrollPane1.setViewportView(dataArea);

        editBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editBtnMouseReleased(evt);
            }
        });

        contBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        contBtn.setText("CONTINUE");
        contBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                contBtnMouseReleased(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("title");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(contBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtnMouseReleased
        // TODO add your handling code here:
        this.setVisible(false);
        data.setVisible(true);
        data.setLocation(500,150);
    }//GEN-LAST:event_editBtnMouseReleased

    private void contBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contBtnMouseReleased
        // TODO add your handling code here:
        this.setVisible(false);
        //this.meanComputation();
        CMT cmt = new CMT(title,size,meanComputation(),medianComputation(),modeComputation(),s2Computation(),sComputation(),rangeComputation(),modeType);
        cmt.setVisible(true);
        cmt.setLocation(500,150);
        
    }//GEN-LAST:event_contBtnMouseReleased
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RawData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RawData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RawData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RawData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                if(datatype == "floa")
                new RawData(title,dataType).setVisible(true);
            }
        });*/
    }
    public ArrayList<String> dataToString(){
        dataArr = new ArrayList<String>();
        if(dataType == "float"){
            for(int i = 0; i < fdata.length; i++){
                dataArr.add("" + fdata[i]);
            }
        } else {
            for(int i = 0; i < idata.length; i++){
                dataArr.add("" + idata[i]);
            }
        }
        return dataArr;
    }
    
    public void setTextArea(){
        titleLabel.setText(title + " (n = " + size + ")");
        ArrayList<String> dataStr = dataToString();
        dataArea.setText("\n\n");
        int ctr = 0;
        for(int i = 0; i < dataStr.size(); i++){
            if(ctr == 5){
                dataArea.append("\n\n");
                ctr = 0;
            }
                dataArea.append("[" + (i+1) + "]  " + dataStr.get(i)+ "\t");
                ctr++;
            
        }
    }
    
    public String meanComputation(){
        
        if(dataType == "float"){
            float meanRes = 0;
            float sum = 0;
            for(int i = 0; i < fdata.length; i++){
                sum += fdata[i];
            }
            meanRes = (float) ((float)sum / (float) (fdata.length));
            mean = "" + meanRes;
            meanres = meanRes;
        } else {
            int sum = 0;
            float meanRes = 0;
            for(int i = 0; i <idata.length; i++){
                sum+= idata[i];
            }
            meanRes = (float) ((float)sum / (float) (idata.length));
            mean = "" + meanRes;
            meanres = meanRes;
        }
        
        return mean;
    }
    
    public float deviation(float meanres){
        float sum = 0;
        float temp = 0;
        float stemp = 0;
        float s2res = 0;
        
        if(dataType == "float"){
            for(int i =0; i < this.size; i++){
                temp = (float)fsorted[i]- (float)meanres;
                System.out.println(meanres);
                stemp = (float) Math.pow(temp, 2);
                sum += stemp;
            }
            //stemp= (float) Math.pow(sum,2);
            s2res = (float)(sum / size);
            
        } else {
            for(int i =0; i < this.size; i++){
                temp = (float)isorted[i]- (float)meanres;
                System.out.println(meanres);
                stemp = (float) Math.pow(temp,2);
                System.out.println("temp = " + temp);
                sum += stemp;
            }
            s2res = (float) (sum / size);
        }
        sres = (float) Math.sqrt(s2res);
        System.out.println("sres = " + sres);
        System.out.println("s2res = " + s2res);
        return s2res;
        
    }
    
    public String s2Computation(){
        
       s2 = "" + deviation(meanres);
        
       return s2;
    }
    

    public String sComputation(){
        deviation(meanres);
        s = "" + sres ;
        return s;
    }
    
    
    public void sortElements(){
        
        if(dataType == "float"){
            fsorted = new float[fdata.length];
            for(int i = 0; i < fdata.length; i++){
                fsorted[i] = fdata[i];
            }
            Arrays.sort(fsorted);
        } else {
            isorted = new int[idata.length];
            for(int i=0; i < idata.length; i++){
                isorted[i] = idata[i];
            }
            Arrays.sort(isorted);
        }
    }
    
    
    public  String modeComputation() {
        
        if(dataType == "float"){
            final List<Float> modes = new ArrayList<Float>();
            final Map<Float, Integer> countMap = new HashMap<Float, Integer>();

            int max = -1;

            for (final float n : fsorted) {
                int count = 0;

                if (countMap.containsKey(n)) {
                    count = countMap.get(n) + 1;
                } else {
                    count = 1;
                }

                countMap.put(n, count);

                if (count > max) {
                    max = count;
                }
            }

            for (final Map.Entry<Float, Integer> tuple : countMap.entrySet()) {
                if (tuple.getValue() == max) {
                    modes.add(tuple.getKey());
                }
            }
            
            for(float f: modes){
                mode += "= " + f + "\n";
            }
             if(modes.size() == 1){
                 modeType = "unimodal";
             } else if(modes.size() == 2){
                 modeType = "bimodal";
             } else if(modes.size() == size){
                 modeType = "no mode";
                 mode = "";
             } else if(modes.size() > 1 && modes.size() != size && modes.size() != 2){
                 modeType = "multimodal";
             } else {
                 modeType = "multimodal";
             }
        } else {
            final List<Integer> modes = new ArrayList<Integer>();
            final Map<Integer, Integer> countMap = new HashMap<Integer, Integer>();

            int max = -1;

            for (final int n : isorted) {
                int count = 0;

                if (countMap.containsKey(n)) {
                    count = countMap.get(n) + 1;
                } else {
                    count = 1;
                }

                countMap.put(n, count);

                if (count > max) {
                    max = count;
                }
            }

            for (final Map.Entry<Integer, Integer> tuple : countMap.entrySet()) {
                if (tuple.getValue() == max) {
                    modes.add(tuple.getKey());
                }
            }
            
            for(int i: modes){
                mode += "= " + i + "\n";
            }
             if(modes.size() == 1){
                 modeType = "unimodal";
             } else if(modes.size() == 2){
                 modeType = "bimodal";
             } else if(modes.size() == size){
                 modeType = "no mode";
                 mode = "";
             } else if(modes.size() > 1 && modes.size() != size && modes.size() == 2){
                 modeType = "multimodal";
             } else {
                 modeType = "multimodal";
             }
        }
        

    return mode;


    }
    
    
    public String medianComputation(){
        sortElements();
        int med1 = 0;

        if(dataType == "float"){
            float medres = 0;
            if(fdata.length % 2 == 0){
                int med2 = 0;
                med1 = (int) Math.ceil(size / 2); 
                med2 = (int) Math.ceil((size+ 2) / 2);
                medres = (float)(fsorted[med1] + fsorted[med2]) / 2;
                median = "" + medres;
            } else {
                med1 = (int) Math.ceil(size/2);
                medres = fsorted[med1];
                median = "" + medres;
            }
           
        } else {
             float medres = 0;
            if(idata.length % 2 == 0){
               
                int med2 = 0;
                med1 = (int) Math.ceil(size / 2); 
                med2 = (int) Math.ceil((size+ 2) / 2);
                medres = (float) (((float)isorted[med1] + (float)isorted[med2]) / (float)2);
                median = "" + medres;        
            } else {
                med1 = (int) Math.ceil(size / 2);
                medres = isorted[med1];
                median = ""+medres;
            }
        }
        
        return median;
        
    }
    
    public String rangeComputation(){
        
        sortElements();
        
        if(dataType == "float"){
            float rangeres = 0;
            
            rangeres = fsorted[fsorted.length-1] - fsorted[0];
            range = "" + rangeres;
        } else{
            int rangeres = 0;
            
            rangeres = isorted[isorted.length - 1] - isorted[0];
            range = "" + rangeres;
        }
        
        return range;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton contBtn;
    private javax.swing.JTextArea dataArea;
    private javax.swing.JButton editBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
